name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Testing and Building
  backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: task_manager_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd backend
        npm test
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: task_manager_test
        DB_USER: postgres
        DB_PASSWORD: password
        JWT_SECRET: test-secret
    
    - name: Build Backend Docker Image
      run: |
        cd backend
        docker build -t task-manager-api:${{ github.sha }} .
    
    - name: Test Backend Docker Image
      run: |
        cd backend
        docker run --rm -d --name test-api -p 5001:5001 \
          -e DB_HOST=localhost \
          -e DB_PORT=5432 \
          -e DB_NAME=task_manager_test \
          -e DB_USER=postgres \
          -e DB_PASSWORD=password \
          -e JWT_SECRET=test-secret \
          task-manager-api:${{ github.sha }}
        sleep 10
        curl -f http://localhost:5001/health || exit 1
        docker stop test-api

  # Frontend Testing and Building
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --watchAll=false --coverage
    
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
      env:
        REACT_APP_API_URL: https://api.example.com/api
    
    - name: Upload Frontend Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Security Audit
      run: |
        cd backend && npm audit --audit-level=moderate
        cd ../frontend && npm audit --audit-level=moderate
    
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        path: backend

  # Docker Image Security
  docker-security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'backend:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deployment to Staging (on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    needs: [backend, frontend, security]
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: AWS ECS, Heroku, etc.

  # Deployment to Production (on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend, frontend, security]
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: AWS ECS, Heroku, etc.
    
    - name: Notify Deployment
      run: |
        echo "Production deployment completed successfully!"
        # Add notification logic (Slack, email, etc.)
